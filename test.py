from pygame import *
from pygame.locals import *
import random
# import os
import time as t

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∂–∏–º–∞ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ
sc = display.set_mode((0, 0), FULLSCREEN)
info = display.Info()
screenWidth = info.current_w
screenHeight = info.current_h

if screenWidth == 1920:
    scale = 4
    font.init()
    font = font.Font(None, 40)
else:
    scale = 2.55
    font.init()
    font = font.Font(None, 27)


def loads(path):
    im = image.load(path)
    # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    scaled_width = min(im.get_width(), screenWidth)
    scaled_height = min(im.get_height(), screenHeight)
    return transform.scale(im, (int(scaled_width * scale), int(scaled_height * scale)))


def button(img, x, y):
    mouse_pos = mouse.get_pos()
    button_rect = img.get_rect(topleft=(
        int(x * scale) + screenWidth // 2 - img.get_width() // 2,
        int(y * scale) + screenHeight // 2 - img.get_height() // 2
    ))
    return button_rect.collidepoint(mouse_pos)


def pixi(img, x, y, current=sc):
    if img is not None:
        current.blit(img, (int(x * scale) + current.get_width() // 2 - img.get_width() // 2,
                           int(y * scale) + current.get_height() // 2 - img.get_height() // 2))


def recolor(img):
    filter_color = (52, 78, 186)  # RGB –¥–ª—è #344eba
    filter_surface = Surface(img.get_size())
    filter_surface.fill(filter_color)
    filtered_image = img.copy()
    filtered_image.blit(filter_surface, (0, 0), special_flags=BLEND_RGBA_MULT)
    return filtered_image


dizzy = loads("sprites/cards/dizzy.png")
border_dizzy = loads("sprites/cards/border_dizzy.png")

mock_zone_first = loads("sprites/mock_zone_first.png")
cockpit = loads("sprites/cockpit.png")

chassis_boxy = loads("sprites/chassis_boxy.png")
cannon_artemis = loads("sprites/cannon_artemis.png")
cockpit_artemis = loads("sprites/cockpit_artemis.png")
missiles_artemis = loads("sprites/missiles_artemis.png")
wing_player = loads("sprites/wing_player.png")
wing_player_mir = loads("sprites/wing_player_mir.png")

startCombat = loads("sprites/icons/startCombat.png")
shield = loads("sprites/icons/shield.png")
evade = loads("sprites/icons/evade.png")
tempShield = loads("sprites/icons/tempShield.png")
powerdrive = loads("sprites/icons/powerdrive.png")
overdrive = loads("sprites/icons/overdrive.png")
ace = loads("sprites/icons/ace.png")
hermes = loads("sprites/icons/hermes.png")
autododgeLeft = loads("sprites/icons/autododgeLeft.png")
autododgeRight = loads("sprites/icons/autododgeRight.png")
heat = loads("sprites/icons/heat.png")
loseEvadeNextTurn = loads("sprites/icons/loseEvadeNextTurn.png")
payback = loads("sprites/icons/payback.png")
tempPayback = loads("sprites/icons/tempPayback.png")
boost = loads("sprites/icons/boost.png")
backwardsMissiles = loads("sprites/icons/backwardsMissiles.png")
corrode = loads("sprites/icons/corrode.png")
endlessMagazine = loads("sprites/icons/endlessMagazine.png")
energyLessNextTurn = loads("sprites/icons/energyLessNextTurn.png")
energyNextTurn = loads("sprites/icons/energyNextTurn.png")
drawLessNextTurn = loads("sprites/icons/drawLessNextTurn.png")
drawNextTurn = loads("sprites/icons/drawNextTurn.png")
drawCard = loads("sprites/icons/drawCard.png")
autopilot = loads("sprites/icons/autopilot.png")
bubbleShield = loads("sprites/icons/bubbleShield.png")
mitosis = loads("sprites/icons/mitosis.png")
quarry = loads("sprites/icons/quarry.png")
serenity = loads("sprites/icons/serenity.png")
stunCharge = loads("sprites/icons/stunCharge.png")
stunSource = loads("sprites/icons/stunSource.png")
tableFlip = loads("sprites/icons/tableFlip.png")
timeStop = loads("sprites/icons/timeStop.png")
engineStall = loads("sprites/icons/engineStall.png")
strafe = loads("sprites/icons/strafe.png")
cleanExhaust = loads("sprites/icons/cleanExhaust.png")
libra = loads("sprites/icons/libra.png")
droneShift = loads("sprites/icons/droneShift.png")
perfectShield = loads("sprites/icons/perfectShield.png")
rockFactory = loads("sprites/icons/rockFactory.png")
hurtBlockable = loads("sprites/icons/hurtBlockable.png")

status_bg = loads("sprites/icons/status_bg.png")

m_r = loads("sprites/move_right.png")
lif = loads("sprites/life.png")
lif_cr = loads("sprites/life_corner_r.png")
lif_cl = loads("sprites/life_corner_l.png")
lif_net = loads("sprites/life_net.png")
shild = loads("sprites/shild.png")
shild_net = loads("sprites/shild_net.png")
shild_corner = loads("sprites/shild_corner.png")
vshild = loads("sprites/vshild.png")

cannon_cicada = loads("sprites/ememy/cannon_cicada.png")
chassis_cicada = loads("sprites/ememy/chassis_cicada.png")
cockpit_cicada = loads("sprites/ememy/cockpit_cicada.png")
wing_cicada = loads("sprites/ememy/wing_cicada.png")
wing_cicada_mir = loads("sprites/ememy/wing_cicada_mir.png")
missiles_cicada = loads("sprites/ememy/missiles_artemis.png")

energy = loads("sprites/energy.png")
deck = loads("sprites/deck.png")
exhaust = loads("sprites/exhaust.png")
base_gray = loads("sprites/base_gray.png")
menu_menu = loads("sprites/menu.png")
char_dizzy = loads("sprites/char_dizzy.png")
char_compOffline_mini = loads("sprites/char_compOffline_mini.png")
char_enemy = loads("sprites/char_enemy.png")
enemy_ship_name = loads("sprites/enemy_ship_name.png")

dizzy_neutral = loads("sprites/dizzy_neutral_0.png")
scrap_neutral = loads("sprites/scrap_neutral_0.png")
comp_mini = loads("sprites/comp_mini_0.png")

hint_shield = loads("sprites/hints/hint_shield.png")
hint_tempshield = loads("sprites/hints/hint_tempshield.png")
hint_status_self = loads("sprites/hints/hint_status_self.png")
hint_missile = loads("sprites/hints/hint_missile.png")
hint_card_global = loads("sprites/hints/hint_card_global.png")
hint_status_global = loads("sprites/hints/hint_status_global.png")
hint_status = loads("sprites/hints/hint_status.png")

# ‚àÜ ‚ñ≤ ‚ü± ‚¨Ü ‚§â ‚∏ï ‚áñ ‚çì –æ ‚¶ª ‚äï ‚•Æ
# ·êÅ ‚ñº ‚ü∞ ‚¨á ‚§à ‚∏î ‚áò ‚áÖ

drone = loads("sprites/drones/drone.png")
attackDroneMk2 = loads("sprites/drones/attackDroneMk2.png")
shieldDrone = transform.flip(loads("sprites/drones/shieldDrone.png"), False, True)
missile_normal = loads("sprites/drones/missile_normal.png")
missile_heavy = loads("sprites/drones/missile_heavy.png")
missile_corrode = loads("sprites/drones/missile_corrode.png")
missile_seeker = loads("sprites/drones/missile_seeker.png")
jupiterDrone = loads("sprites/drones/jupiterDrone.png")
asteroid = loads("sprites/drones/asteroid.png")
spaceMine = loads("sprites/drones/spaceMine.png")
repairKit = loads("sprites/drones/repairKit.png")
energyDrone = transform.flip(loads("sprites/drones/energyDrone.png"), False, True)
drone_rev = transform.flip(drone, False, True)
attackDroneMk2_rev = transform.flip(attackDroneMk2, False, True)
shieldDrone_rev = transform.flip(shieldDrone, False, True)
missile_normal_rev = transform.flip(missile_normal, False, True)
missile_heavy_rev = transform.flip(missile_heavy, False, True)
missile_corrode_rev = transform.flip(missile_corrode, False, True)
missile_seeker_rev = transform.flip(missile_seeker, False, True)
dualDrone = loads("sprites/drones/dualDrone.png")

spawn = loads("sprites/icons/spawn.png")

def droneimage(x):
    a="‚àÜ‚ñ≤‚ü±‚¨Ü‚§â‚∏ï‚áñ‚çì–æ‚¶ª‚äï‚•Æ·êÅ‚ñº‚ü∞‚¨á‚§à‚∏î‚áò‚áÖ"
    b=[drone,attackDroneMk2,shieldDrone,missile_normal,missile_heavy,missile_corrode,missile_seeker,jupiterDrone,asteroid,
       spaceMine,repairKit,energyDrone,drone_rev,attackDroneMk2_rev,shieldDrone_rev,missile_normal_rev,missile_heavy_rev,
       missile_corrode_rev,missile_seeker_rev,dualDrone]
    return b[a.index(x)]


def ee(**k):
    f = {"–£—Ä–æ–Ω": [], "–£—Å–∏–ª–µ–Ω–∏–µ": ["", 0, 0], "–î–≤–∏–∂": -666, "–©–∏—Ç": [0, 0], "–í—â–∏—Ç": [0, 0], "–í—ã–ø—É—Å–∫": [" ", 0],
         "–†–∞–∑–¥": [0, 0], "–î–µ–±–∞—Ñ": ["", 0, 0], "–≠—Ñ–£—Ä–æ–Ω": [0, 0, "", 0]}
    for key, v in k.items():
        f[key] = v
    return f


def ene(name, h=0, ef={"üî∂": 0}, midl=[], sdwig=0, sship=[]):
    if name == "CCD-19 Cicada":
        if h != 0:
            if h % 2 == 1:
                return ee(–£—Ä–æ–Ω=[2 + ef["üî∂"], 0])
            if h % 2 == 0:
                return ee(–£—Å–∏–ª–µ–Ω–∏–µ=["üî∂", 1, 1], –©–∏—Ç=[2, 3], –î–≤–∏–∂=0)
        return {"–ò–º—è": "–ë–µ—Å–ø–∏–ª–æ—Ç–Ω–∏–∫ –¶–∏–∫–∞–¥–∞", "–ö–∞–±–∏–Ω–∞": [1], "–û—Ç—Å–µ–∫": [3], "–ü—É—à–∫–∞": [2], "–û—Å—Ç–∞–ª—å–Ω–æ–µ": [0, 4],
                "–¢–≤—ë—Ä–¥": [0, 1, 2, 3, 4], "–ë—Ä–æ–Ω—è": [], "–£—è–∑–≤–∏–º–æ—Å—Ç—å": [], "–¢—Ä–µ—â–∏–Ω–∞": [],
                "–°–ø—Ä–∞–π—Ç—ã": (
                chassis_cicada, wing_cicada, missiles_cicada, cannon_cicada, cockpit_cicada, wing_cicada_mir),
                "–ö–æ—Ä–ø—É—Å": 8, "–©–∏—Ç": 4}
    elif name == "–•–∞–± –¥—Ä –ú–æ–Ω–∞—Ä—Ö":
        if h > 0:
            if h % 2 == 1:
                return ee(–í—ã–ø—É—Å–∫=["‚ñº", 2])
            if h % 2 == 0:
                return ee(–í—ã–ø—É—Å–∫=["‚ü∞", 0, "·êÅ", 2],)
        return {"–ò–º—è": name, "–ö–∞–±–∏–Ω–∞": [1], "–û—Ç—Å–µ–∫": [0, 2], "–ü—É—à–∫–∞": [], "–û—Å—Ç–∞–ª—å–Ω–æ–µ": [3], "–¢–≤—ë—Ä–¥": [0, 1, 2, 3],
                "–ë—Ä–æ–Ω—è": [], "–£—è–∑–≤–∏–º–æ—Å—Ç—å": [], "–¢—Ä–µ—â–∏–Ω–∞": [],"–°–ø—Ä–∞–π—Ç—ã": (
                chassis_cicada, missiles_cicada, cockpit_cicada, missiles_cicada, wing_cicada_mir), "–ö–æ—Ä–ø—É—Å": 4,
                "–©–∏—Ç": 8}

def st_otris(fon,sship,ener,vta,sbros,burn,vs,nam,hod,enemy_ship,sdwig,midl,mhp,hp,mbron,bron,vbron,mlife,life,mdefe,defe,vdefe,ef,enef,manevr,ha,q):
    pixi(fon, 0, 0)
    pixi(font.render(str(ener), True, (255, 255, 255)), -220, 110)
    pixi(font.render(str(len(sbros)), True, (255, 255, 255)), 212, 89)
    pixi(font.render(str(len(vta)), True, (255, 255, 255)), -194, 121)
    pixi(font.render(str(len(burn)), True, (255, 255, 255)), 185, 89)

    if q:
        twerd = []
        for i in vs["–¢–≤—ë—Ä–¥"]:
            twerd.append(-(len(vs["–¢–≤—ë—Ä–¥"]) - 1) * 8 + i * 16 + sdwig * 16 + len(enemy_ship) % 2 * 8)

        for i in range(len(ene(nam, hod)["–£—Ä–æ–Ω"]) // 2):
            alpha_surface = Surface(sc.get_size(), SRCALPHA)
            x = vs["–ü—É—à–∫–∞"][ene(nam, hod)["–£—Ä–æ–Ω"][2 * i + 1]] * 16 - (len(enemy_ship) - 2) * 8 + i * 16 - sdwig * 16 - len(
                enemy_ship) % 2 * 8
            y = -5
            if midl[25 + vs["–ü—É—à–∫–∞"][ene(nam, hod)["–£—Ä–æ–Ω"][2 * i + 1]] - sdwig -2] != " ":
                mimo = -30
            elif (vs["–ü—É—à–∫–∞"][ene(nam, hod)["–£—Ä–æ–Ω"][2 * i + 1]] - sdwig - 2) in range(-2, 3):
                mimo = 10
            else:
                mimo = 155
            draw.lines(alpha_surface, (200, 20, 0, 150), True,
                       ((int(x * scale) + screenWidth // 2, int((y - 55) * scale) + screenHeight // 2),
                        (int(x * scale) + screenWidth // 2, int((y + mimo) * scale) + screenHeight // 2)),
                       int(16 * scale))
            pixi(alpha_surface, 0, 0)
            pixi(font.render(str(ene(nam, hod, enef)["–£—Ä–æ–Ω"][2 * i]), True, (230, 10, 0)), x, y - 42)
        if ene(nam, hod)["–≠—Ñ–£—Ä–æ–Ω"] != [0, 0, "", 0]:
            for i in range(len(ene(nam, hod)["–≠—Ñ–£—Ä–æ–Ω"]) // 4):
                alpha_surface = Surface(sc.get_size(), SRCALPHA)
                x = vs["–ü—É—à–∫–∞"][ene(nam, hod)["–≠—Ñ–£—Ä–æ–Ω"][4 * i + 1]] * 16 - (
                        len(enemy_ship) - 2) * 8 + i * 16 - sdwig * 16 - len(enemy_ship) % 2 * 8
                y = -5
                if midl[25 + vs["–ü—É—à–∫–∞"][ene(nam, hod)["–£—Ä–æ–Ω"][4 * i + 1]] - sdwig - 2] != " ":
                    mimo = -30
                elif (vs["–ü—É—à–∫–∞"][ene(nam, hod)["–≠—Ñ–£—Ä–æ–Ω"][4 * i + 1]] - sdwig - 2) in range(-2, 3):
                    mimo = 0
                else:
                    mimo = 155
                draw.lines(alpha_surface, (200, 200, 0, 150), True,
                           ((int(x * scale) + screenWidth // 2, int((y - 55) * scale) + screenHeight // 2),
                            (int(x * scale) + screenWidth // 2, int((y + mimo) * scale) + screenHeight // 2)),
                           int(16 * scale))
                pixi(alpha_surface, 0, 0)
                pixi(font.render(str(ene(nam, hod, enef)["–≠—Ñ–£—Ä–æ–Ω"][4 * i]), True, (230, 10, 0)), x, y - 42)

    for i in range(len(enemy_ship)):
        if i == 0:
            pixi(enemy_ship[0], -1 - sdwig * 16 - len(enemy_ship) % 2 * 8, -105)
        else:
            pixi(enemy_ship[i], -(len(enemy_ship)) * 8 + i * 16 - sdwig * 16 - len(enemy_ship) % 2 * 8, -75)

    for i in range(len(sship["–°–ø—Ä–∞–π—Ç—ã"])):
        if i == 0:
            pixi(sship["–°–ø—Ä–∞–π—Ç—ã"][0],-1, 35)
        else:
            pixi(sship["–°–ø—Ä–∞–π—Ç—ã"][i],-32+(i-1)*16,10)

    if q:
        if ene(nam, hod)["–©–∏—Ç"] != [0, 0]:
            for qqq in range(len(ene(nam, hod)["–©–∏—Ç"]) // 2):
                pixi(hint_shield,
                     -(len(enemy_ship)) * 8 + (ene(nam, hod)["–©–∏—Ç"][2 * qqq + 1] + 1) * 16 - sdwig * 16 - len(
                         enemy_ship) % 2 * 8, -75)
        if ene(nam, hod)["–í—â–∏—Ç"] != [0, 0]:
            for qqq in range(len(ene(nam, hod)["–í—â–∏—Ç"]) // 2):
                pixi(hint_tempshield,
                     -(len(enemy_ship)) * 8 + (ene(nam, hod)["–í—â–∏—Ç"][2 * qqq + 1] + 1) * 16 - sdwig * 16 - len(
                         enemy_ship) % 2 * 8, -75)
        if ene(nam, hod)["–£—Å–∏–ª–µ–Ω–∏–µ"] != ["", 0, 0]:
            for qqq in range(len(ene(nam, hod)["–£—Å–∏–ª–µ–Ω–∏–µ"]) // 3):
                pixi(hint_status_self,
                     -(len(enemy_ship)) * 8 + (ene(nam, hod)["–£—Å–∏–ª–µ–Ω–∏–µ"][3 * qqq + 2] + 1) * 16 - sdwig * 16 - len(
                         enemy_ship) % 2 * 8, -75)
        if ene(nam, hod)["–í—ã–ø—É—Å–∫"] != [" ", 0]:
            for qqq in range(len(ene(nam, hod)["–í—ã–ø—É—Å–∫"]) // 2):
                pixi(hint_missile,
                     -(len(enemy_ship)) * 8 + (ene(nam, hod)["–í—ã–ø—É—Å–∫"][2 * qqq + 1] + 1) * 16 - sdwig * 16 - len(
                         enemy_ship) % 2 * 8, -75)
        if ene(nam, hod)["–†–∞–∑–¥"] != [0, 0]:
            for qqq in range(len(ene(nam, hod)["–†–∞–∑–¥"]) // 2):
                pixi(hint_card_global,
                     -(len(enemy_ship)) * 8 + (ene(nam, hod)["–†–∞–∑–¥"][2 * qqq + 1] + 1) * 16 - sdwig * 16 - len(
                         enemy_ship) % 2 * 8, -75)
        if ene(nam, hod)["–î–µ–±–∞—Ñ"] != ["", 0, 0]:
            for qqq in range(len(ene(nam, hod)["–î–µ–±–∞—Ñ"]) // 3):
                pixi(hint_status_global,
                     -(len(enemy_ship)) * 8 + (ene(nam, hod)["–î–µ–±–∞—Ñ"][3 * qqq + 2] + 1) * 16 - sdwig * 16 - len(
                         enemy_ship) % 2 * 8, -75)
        if ene(nam, hod)["–≠—Ñ–£—Ä–æ–Ω"] != [0, 0, "", 0]:
            for qqq in range(len(ene(nam, hod)["–≠—Ñ–£—Ä–æ–Ω"]) // 4):
                pixi(hint_status, -(len(enemy_ship)) * 8 + (
                        vs["–ü—É—à–∫–∞"][ene(nam, hod)["–≠—Ñ–£—Ä–æ–Ω"][4 * qqq + 3]] + 1) * 16 - sdwig * 16 - len(enemy_ship) % 2 * 8,
                     -75)
    for ii in range(len(midl)):
        if midl[ii] != " ":
            pixi(droneimage(midl[ii]), (ii - 25) * 16, -30)

    statusOtstup = 0
    statusk = 0

    for key, v in ef.items():
        if v != 0:
            statusOtstup += 1
    if manevr > 0:
        statusOtstup += 1
    for key, v in ef.items():
        if v != 0:
            statusk += 1
            pixi(status_bg, - 6.5 - 8.5 * statusOtstup + 17 * statusk - statusOtstup, 36)
            pixi(kartinka[key], -2 - 6.5 - 8.5 * statusOtstup + 17 * statusk - statusOtstup, 36)
            pixi(font.render(str(v), True, (255, 255, 255)),
                 4 - 6.5 - 8.5 * statusOtstup + 17 * statusk - statusOtstup, 36)
    if manevr > 0:
        statusk += 1
        pixi(status_bg, - 6.5 - 8.5 * statusOtstup + 17 * statusk - statusOtstup, 36)
        pixi(evade, -2 - 6.5 - 8.5 * statusOtstup + 17 * statusk - statusOtstup, 36)
        pixi(font.render(str(manevr), True, (255, 255, 255)),
             4 - 6.5 - 8.5 * statusOtstup + 17 * statusk - statusOtstup, 36)

    statusOtstup = 0
    statusk = 0

    for key, v in enef.items():
        if v != 0:
            statusOtstup += 1
    for key, v in enef.items():
        if v != 0:
            statusk += 1
            pixi(status_bg, - 6.5 - 8.5 * statusOtstup + 17 * statusk - statusOtstup - sdwig * 16, -106)
            pixi(kartinka[key], -2 - 6.5 - 8.5 * statusOtstup + 17 * statusk - statusOtstup - sdwig * 16, -106)
            pixi(font.render(str(v), True, (255, 255, 255)),
                 4 - 6.5 - 8.5 * statusOtstup + 17 * statusk - statusOtstup - sdwig * 16, -106)

    j = 0  # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ö–ø –≤—Ä–∞–≥–∞
    while j < hp:
        pixi(lif, j * 4 - (mhp + mbron - 1) * 2 - sdwig * 16, -96)
        if j == 0:
            pixi(lif_cl, - 3 - (mhp + mbron - 1) * 2 - sdwig * 16, -96)
            pixi(lif_cr, (mhp - 1) * 4 - (mhp + mbron - 1) * 2 + 2 - sdwig * 16, -96)
        j += 1
    while j < mhp:
        pixi(lif_net, j * 4 - (mhp + mbron - 1) * 2 - sdwig * 16, -96)
        j = j + 1
    while j < mhp + bron:
        pixi(shild, j * 4 - (mhp + mbron - 1) * 2 - sdwig * 16, -96)
        j = j + 1
    while j < mhp + mbron:
        pixi(shild_net, j * 4 - (mhp + mbron - 1) * 2 - sdwig * 16, -96)
        j = j + 1
    while j < mhp + mbron + vbron:
        pixi(vshild, j * 4 - (mhp + mbron - 1) * 2 - sdwig * 16, -96)
        j = j + 1
    if mbron > 0 or vdefe > 0:
        pixi(shild_corner, j * 4 - (mhp + mbron - 1) * 2 - sdwig * 16 - 2, -96)

    j = 0  # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ö–ø
    while j < life:
        pixi(lif, j * 4 - (mlife + mdefe - 1) * 2, 26)
        if j == 0:
            pixi(lif_cl, - 3 - (mlife + mdefe - 1) * 2, 26)
            pixi(lif_cr, (mlife - 1) * 4 - (mlife + mdefe - 1) * 2 + 2, 26)
        j = j + 1
    while j < mlife:
        pixi(lif_net, j * 4 - (mlife + mdefe - 1) * 2, 26)
        j = j + 1
    while j < mlife + defe:
        pixi(shild, j * 4 - (mlife + mdefe - 1) * 2, 26)
        j = j + 1
    while j < mlife + mdefe:
        pixi(shild_net, j * 4 - (mlife + mdefe - 1) * 2, 26)
        j = j + 1
    while j < mlife + mdefe + vdefe:
        pixi(vshild, j * 4 - (mlife + mdefe - 1) * 2, 26)
        j = j + 1
    if mdefe > 0 or vdefe > 0:
        pixi(shild_corner, j * 4 - (mlife + mdefe - 1) * 2 - 2, 26)

    if q:
        for i in range(len(ha)):
            if len(ha) < 6:
                mom = 60
            if len(ha) == 6:
                mom = 55 - 1
            if len(ha) == 7:
                mom = 50 - 2
            if len(ha) == 8:
                mom = 45 - 3
            if len(ha) == 9:
                mom = 40 - 4
            if len(ha) == 10:
                mom = 35 - 5
            ha[i].show(i * mom - (len(ha) - 1) * mom / 2, 90)
        return mom,twerd

class card:
    def __init__(self, **k):
        f = {"–∏–º—è": "", "–≤—ã–ø—É—Å–∫": " ", "–º–∞–Ω—ë–≤—Ä": 0, "–≤—â–∏—Ç": 0, "—â–∏—Ç": 0, "—É—Ä–æ–Ω": -1, "—Ü–µ–Ω–∞": 1, "–ø–µ—Ä—Å": "", "–¥–æ–ø": "",
             "—Å—Ç–∞—Ç—É—Å": {"üî∂": 0, "ü•æ": 0, "‚≠ê": 0, "‚Ü©": 0, "‚Ü™": 0, "üöò": 0, "üåà": 0, "ü´ß": 0, "üíæ": 0, "ü©∏": 0, "üìó": 0, "üßß": 0,
                        "<üü¢>": 0, "üî´": 0, "‚ö°": 0, "‚è∞": 0, "üõë": 0, "üî•": 0, "üõ°": 0, "üÖø": 0, "üöÄ": 0, "ü¶†": 0, "": 0, "‚ô¶": 0,
                        "‚á´": 0, "‚ä•": 0, "ü•á": 0, "üß±": 0, "ü™®": 0, "üòá": 0, "‚úà": 0, "üï∏": 0, "‚ñ©": 0, "ü™ë": 0, "‚åö": 0,
                        "–î–æ–±–æ—Ä": 0},
             "–≤—Å—Ç–∞—Ç—É—Å": {"üî∂": 0, "ü•æ": 0, "‚≠ê": 0, "‚Ü©": 0, "‚Ü™": 0, "üöò": 0, "üåà": 0, "ü´ß": 0, "üíæ": 0, "ü©∏": 0, "üìó": 0, "üßß": 0,
                         "<üü¢>": 0, "üî´": 0, "‚ö°": 0, "‚è∞": 0, "üõë": 0, "üî•": 0, "üõ°": 0, "üÖø": 0, "üöÄ": 0, "ü¶†": 0, "": 0,
                         "‚ô¶": 0, "‚á´": 0, "‚ä•": 0, "ü•á": 0, "üß±": 0, "ü™®": 0, "üòá": 0, "‚úà": 0, "üï∏": 0, "‚ñ©": 0, "ü™ë": 0,
                         "‚åö": 0}}
        for key, v in k.items():
            f[key] = v
        self.–∏–º—è = f["–∏–º—è"]
        self.—É—Ä–æ–Ω = f["—É—Ä–æ–Ω"]
        self.—â–∏—Ç = f["—â–∏—Ç"]
        self.–º–∞–Ω—ë–≤—Ä = f["–º–∞–Ω—ë–≤—Ä"]
        self.–≤—â–∏—Ç = f["–≤—â–∏—Ç"]
        self.–≤—ã–ø—É—Å–∫ = f["–≤—ã–ø—É—Å–∫"]
        self.—Ü–µ–Ω–∞ = f["—Ü–µ–Ω–∞"]
        self.—Å—Ç–∞—Ç—É—Å = f["—Å—Ç–∞—Ç—É—Å"]
        self.–≤—Å—Ç–∞—Ç—É—Å = f["–≤—Å—Ç–∞—Ç—É—Å"]
        self.–¥–æ–ø = f["–¥–æ–ø"]
        self.–ø–µ—Ä—Å = f["–ø–µ—Ä—Å"]

    def show(self, x, y, e=None):
        if e is None:
            e = {"üî∂": 0, "ü•æ": 0, "‚≠ê": 0, "‚Ü©": 0, "‚Ü™": 0, "üöò": 0, "üåà": 0, "ü´ß": 0, "üíæ": 0, "ü©∏": 0, "üìó": 0, "üßß": 0,
                 "<üü¢>": 0, "üî´": 0, "‚ö°": 0, "‚è∞": 0, "üõë": 0, "üî•": 0, "üõ°": 0, "üÖø": 0, "üöÄ": 0, "ü¶†": 0, "": 0, "‚ô¶": 0,
                 "‚á´": 0, "‚ä•": 0, "ü•á": 0, "üß±": 0, "ü™®": 0, "üòá": 0, "‚úà": 0, "üï∏": 0, "‚ñ©": 0, "ü™ë": 0, "‚åö": 0,
                 "–î–æ–±–æ—Ä": 0}
        t = {"–£—Ä–æ–Ω": None, "–©–∏—Ç": None, "–ú–∞–Ω—ë–≤—Ä": None, "–í—â–∏—Ç": None, "–í—ã–ø—É—Å–∫": None, "üî∂": None, "ü•æ": None, "‚≠ê": None,
             "‚Ü©": None, "‚Ü™": None, "üöò": None, "üåà": None, "ü´ß": None, "üíæ": None, "ü©∏": None, "üìó": None, "üßß": None,
             "<üü¢>": None, "üî´": None, "‚ö°": None, "‚è∞": None, "üõë": None, "üî•": None, "üõ°": None, "üÖø": None, "üöÄ": None,
             "ü¶†": None, "‚ô¶": None, "‚á´": None, "‚ä•": None, "ü•á": None, "üß±": None, "ü™®": None, "üòá": None, "‚úà": None,
             "üï∏": None, "‚ñ©": None, "ü™ë": None, "‚åö": None, "–î–æ–±–æ—Ä": None, "–î–æ–ø": None}
        if self.—É—Ä–æ–Ω > -1:
            t["–£—Ä–æ–Ω"] = self.—É—Ä–æ–Ω + e["üî∂"] + e["‚ô¶"]
        if self.—â–∏—Ç > 0:
            t["–©–∏—Ç"] = self.—â–∏—Ç
        if self.–º–∞–Ω—ë–≤—Ä > 0:
            t["–ú–∞–Ω—ë–≤—Ä"] = self.–º–∞–Ω—ë–≤—Ä
        if self.–≤—â–∏—Ç > 0:
            t["–í—â–∏—Ç"] = self.–≤—â–∏—Ç
        if self.–≤—ã–ø—É—Å–∫ != " ":
            t["–í—ã–ø—É—Å–∫"] = str(self.–≤—ã–ø—É—Å–∫)
        for key, v in self.—Å—Ç–∞—Ç—É—Å.items():
            if v != 0:
                t[key] = v
        for key, v in self.–≤—Å—Ç–∞—Ç—É—Å.items():
            if v != 0:
                t[key] = v
        if self.–¥–æ–ø != "":
            t["–î–æ–ø"] = self.–¥–æ–ø
        a = 0
        for key, v in t.items():
            if t[key] is not None:
                a += 1

        if self.–ø–µ—Ä—Å == "–î–∏–∑–∑–∏" or True:
            cr = Surface(border_dizzy.get_size())
            pixi(dizzy, 0, 0, cr)
            pixi(border_dizzy, 0, 0, cr)

        q = 1
        text = self.–∏–º—è.split()
        for i in range(len(text)):
            if i != len(text) - 1:
                if len(text[i + 1]) + len(text[i]) < 12:
                    namec = font.render(text[i] + " " + text[i + 1], True, (0, 0, 0))
                    cr.blit(namec, (7, 5))
                    i += 1
                else:
                    namec = font.render(text[i], True, (0, 0, 0))
                    cr.blit(namec, (7, 5))
                    namec = font.render(text[i + 1], True, (0, 0, 0))
                    cr.blit(namec, (7, 30))
        for key, v in t.items():
            if t[key] is not None and key == "–í—ã–ø—É—Å–∫":
                pixi(spawn, -6, 12 * q - a * 6 // 2 - a * 2, cr)
                pixi(droneimage(t[key]), 5, 12 * q - a * 6 // 2 - a * 2, cr)
                q += 1
            elif t[key] is not None and key != "–î–æ–ø" and key != "–í—ã–ø—É—Å–∫":
                # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ kartinka[key] –∑–∞–≥—Ä—É–∂–µ–Ω
                if kartinka[key] is not None:
                    pixi(kartinka[key], -4, 12 * q - a * 6 // 2 - a * 2, cr)
                    namec = font.render(str(t[key]), True, (255, 255, 255))
                    pixi(namec, 4, 12 * q - a * 6 // 2 - a * 2, cr)
                    q += 1
        cr.blit(font.render(str(self.—Ü–µ–Ω–∞), True, (255, 255, 255)), (20, 80))
        pixi(cr, x, y)


cards = (card(–ø–µ—Ä—Å="–ö–∏—Å–∞", –∏–º—è="–ë–∞–∑–æ–≤—ã–π –≤—ã—Å—Ç—Ä–µ–ª", —É—Ä–æ–Ω=1, —Å—Ç–∞—Ç—É—Å={"üî∂": 1}),
         card(–ø–µ—Ä—Å="–ö–∏—Å–∞", –∏–º—è="–ë–∞–∑–æ–≤—ã–π —â–∏—Ç", —â–∏—Ç=1, —É—Ä–æ–Ω=1, –º–∞–Ω—ë–≤—Ä=1, –≤—â–∏—Ç=1),
         card(–ø–µ—Ä—Å="–ö–∏—Å–∞", –∏–º—è="–ë–∞–∑–æ–≤—ã–π –º–∞–Ω—ë–≤—Ä", –º–∞–Ω—ë–≤—Ä=1),
         card(–ø–µ—Ä—Å="–î–∏–∑–∑–∏", –∏–º—è="–ë–æ–ª—å—à–æ–π —â–∏—Ç", —â–∏—Ç=3, —Ü–µ–Ω–∞=2, —Å—Ç–∞—Ç—É—Å={"‚ô¶": 1}),
         card(–ø–µ—Ä—Å="–î–∏–∑–∑–∏", –∏–º—è="–ë–ª–æ–∫–∏—Ä—É—é—â–∏–π –≤—ã—Å—Ç—Ä–µ–ª", —É—Ä–æ–Ω=1, –≤—â–∏—Ç=1),
         card(–ø–µ—Ä—Å="–ê–π–∑–µ–∫",–∏–º—è="–ó–∞—â–∏—Ç–Ω—ã–π –¥—Ä–æ–Ω",–≤—ã–ø—É—Å–∫="‚ü±"))

kartinka = {"–£—Ä–æ–Ω": startCombat, "–©–∏—Ç": shield, "–ú–∞–Ω—ë–≤—Ä": evade, "–í—â–∏—Ç": tempShield, "–í—ã–ø—É—Å–∫": None, "üî∂": powerdrive,
            "ü•æ": hermes, "‚≠ê": ace,
            "‚Ü©": autododgeRight, "‚Ü™": autododgeLeft, "üöò": autopilot, "üåà": boost, "ü´ß": bubbleShield, "üíæ": cleanExhaust,
            "ü©∏": corrode, "üìó": drawNextTurn, "üßß": drawLessNextTurn,
            "<üü¢>": droneShift, "üî´": endlessMagazine, "‚ö°": energyNextTurn, "‚è∞": energyLessNextTurn, "üõë": engineStall,
            "üî•": heat, "üõ°": libra, "üÖø": loseEvadeNextTurn, "üöÄ": backwardsMissiles,
            "ü¶†": mitosis, "‚ô¶": overdrive, "‚á´": tempPayback, "‚ä•": payback, "ü•á": perfectShield, "üß±": hurtBlockable,
            "ü™®": rockFactory, "üòá": serenity, "‚úà": strafe,
            "üï∏": stunCharge, "‚ñ©": stunSource, "ü™ë": tableFlip, "‚åö": timeStop, "–î–æ–±–æ—Ä": drawCard, "–î–æ–ø": None}


def battle(sship, life, mlife, colod, razm, nam, mdefe, defe, re):
    FPS = 60
    clock = time.Clock()

    hod = 0
    mener = 3

    sdwig = 0

    vs = ene(nam)
    enemy_ship = vs["–°–ø—Ä–∞–π—Ç—ã"]
    hp = mhp = vs["–ö–æ—Ä–ø—É—Å"]
    bron = mbron = vs["–©–∏—Ç"]

    r = razm
    ha = []
    sbros = []
    burn = []
    vta = colod.copy()
    vustrel_flag = 0
    vupusk_flag = []
    fl_=False
    s = ss = 999

    ef = {"üî∂": 0, "ü•æ": 0, "‚≠ê": 0, "‚Ü©": 0, "‚Ü™": 0, "üöò": 0, "üåà": 0, "ü´ß": 0, "üíæ": 0, "ü©∏": 0, "üìó": 0, "üßß": 0,
          "<üü¢>": 0, "üî´": 0, "‚ö°": 0, "‚è∞": 0, "üõë": 0, "üî•": 0, "üõ°": 0, "üÖø": 0, "üöÄ": 0, "ü¶†": 0, "": 0, "‚ô¶": 0,
          "‚á´": 0, "‚ä•": 0, "ü•á": 0, "üß±": 0, "ü™®": 0, "üòá": 0, "‚úà": 0, "üï∏": 0, "‚ñ©": 0, "ü™ë": 0, "‚åö": 0, "–î–æ–±–æ—Ä": 0}
    enef = ef.copy()
    manevr = 0

    fon = Surface(sc.get_size())
    fon.fill((255, 255, 255))
    pixi(mock_zone_first, 0, 0, fon)
    pixi(recolor(cockpit), 0, 0, fon)
    pixi(energy, -220, 110, fon)
    pixi(deck, -185, 110, fon)
    pixi(recolor(base_gray), 205, 115, fon)
    pixi(font.render("–ö–æ–Ω–µ—Ü —Ö–æ–¥–∞", True, (255, 255, 255)), 205, 114, fon)
    pixi(deck, 221, 78, fon)
    pixi(exhaust, 190, 84, fon)
    pixi(m_r, 64, 10, fon)
    pixi(transform.flip(m_r, True, False), -64, 10, fon)
    pixi(menu_menu, -215, -125, fon)
    pixi(char_dizzy, -204, 50, fon)
    pixi(dizzy_neutral, -204, 50, fon)
    pixi(font.render("–î–∏–∑–∑–∏", True, (255, 255, 255)), -204 - 15, 50 - 24, fon)
    pixi(char_dizzy, -204, -10, fon)
    pixi(dizzy_neutral, -204, -10, fon)
    pixi(font.render("–î–∏–∑–∑–∏", True, (255, 255, 255)), -204 - 15, -10 - 24, fon)
    pixi(char_dizzy, -204, -70, fon)
    pixi(dizzy_neutral, -204, -70, fon)
    pixi(font.render("–î–∏–∑–∑–∏", True, (255, 255, 255)), -204 - 15, -70 - 24, fon)
    pixi(char_compOffline_mini, -160, -120, fon)
    pixi(comp_mini, -129, -104, fon)
    pixi(font.render("Cat.exe", True, (255, 255, 255)), -160, -120 - 11, fon)
    pixi(char_enemy, 203, -84, fon)
    pixi(scrap_neutral, 203, -84, fon)
    pixi(font.render("X.09", True, (200, 0, 0)), 203 - 20, -84 - 24, fon)
    pixi(enemy_ship_name, 204, -120, fon)
    pixi(font.render(nam, True, (255, 255, 255)), 202, -120, fon)

    vbron = 0
    midl=[" "]*50
    while (hp > 0 and life > 0):
        ener = mener
        hod += 1
        vdefe = 0
        random.shuffle(vta)
        random.shuffle(sbros)
        if len(vta) < r:
            for i in range(len(vta)):
                ha.append(vta.pop(0))
            vta.extend(sbros)
            sbros = []
            while len(ha) < r and len(vta) != 0:
                ha.append(vta.pop(0))
        else:
            for i in range(r):
                ha.append(vta.pop(0))
        end = True
        # –•–æ–¥ –∏–≥—Ä–æ–∫–∞
        while (hp > 0 and life > 0 and end):
            mom,twerd = st_otris(fon, sship, ener, vta, sbros, burn, vs, nam, hod, enemy_ship, sdwig, midl, mhp, hp, mbron, bron, vbron,mlife, life, mdefe, defe, vdefe, ef, enef, manevr, ha, True)

            for eve in event.get():
                if eve.type == QUIT or (eve.type == KEYDOWN and eve.key == K_ESCAPE):
                    exit()
                elif eve.type == MOUSEBUTTONDOWN:
                    if button(m_r, 64, 10):
                        if manevr > 0 and ef["üõë"] == 0:
                            sdwig += 1 + ef["ü•æ"]
                            for qqq in range(1 + ef["ü•æ"]):
                                midl.insert(-2, midl.pop(0))
                            manevr -= 1
                    if button(m_r, -64, 10):
                        if manevr > 0 and ef["üõë"] == 0:
                            sdwig -= 1 + ef["ü•æ"]
                            for qqq in range(1 + ef["ü•æ"]):
                                midl.insert(0, midl.pop(-2))
                            manevr -= 1
                    if button(base_gray, 205, 115):
                        end = False
                        break
                    for i in range(len(ha)):
                        if button(dizzy, i * mom - (len(ha) - 1) * mom / 2, 90) and ha[i].—Ü–µ–Ω–∞ <= ener:
                            ener -= ha[i].—Ü–µ–Ω–∞
                            do = ha[i]
                            if do.—É—Ä–æ–Ω != -1:
                                vustrel_flag = do.—É—Ä–æ–Ω
                                s = 0
                            if do.—â–∏—Ç > 0:
                                defe += do.—â–∏—Ç
                                if defe > mdefe:
                                    defe = mdefe
                            if do.–≤—â–∏—Ç > 0:
                                vdefe += do.–≤—â–∏—Ç
                            if do.–º–∞–Ω—ë–≤—Ä > 0:
                                manevr += do.–º–∞–Ω—ë–≤—Ä
                            for key, v in do.—Å—Ç–∞—Ç—É—Å.items():
                                if v != 0:
                                    ef[key] += v
                            if do.–≤—ã–ø—É—Å–∫ != " ":
                                wup = do.–≤—ã–ø—É—Å–∫.split(" ")
                                for w in range(len(wup)):
                                    if ef["üöÄ"] > 0:
                                        if "‚àÜ" in wup[w]:
                                            vup = "·êÅ"
                                        if "‚ñ≤" in wup[w]:
                                            vup = "‚ñº"
                                        if "‚ü±" in wup[w]:
                                            vup = "‚ü∞"
                                        if "‚∏ï" in wup[w]:
                                            vup = "‚∏î"
                                        if "‚áñ" in wup[w]:
                                            vup = "‚áò"
                                        if "‚¨Ü" in wup[w]:
                                            vup = "‚¨á"
                                        if "‚§â" in wup[w]:
                                            vup = "‚§à"
                                    else:
                                        vup = wup[w][-1]
                                    sw = 0
                                    if len(wup[w]) > 1:
                                        if wup[w][1] == "<":
                                            sw -= int(wup[w][0])
                                        if wup[w][1] == ">":
                                            sw += int(wup[w][0])
                                    if ef["ü´ß"] == 0:
                                        if sship["–ò–º—è"]=="–ê—Ä—Ç–µ–º–∏–¥–∞":
                                            vupusk_flag = [23+sship["–û—Ç—Å–µ–∫"][0]+sw,vup]
                                            ss = 0
                            sbros.append(ha.pop(i))
            if len(vupusk_flag)==2:
                if ss < 10:
                    fl_ = False
                    x = (vupusk_flag[0] - 25) * 16
                    y = -10 - ss
                    pixi(droneimage(vupusk_flag[1]), x, y)
                    ss += 2
                else:
                    if midl[vupusk_flag[0]] != " " or fl_:
                        fl_=True
                        midl[vupusk_flag[0]] = " "
                        if ss < 25:
                            x = (vupusk_flag[0] - 25) * 16
                            y = -30
                            pixi(loads("sprites/drones/droneExplosion/droneExplosion_000"+str(ss-9)+".png"),x,y)
                            ss += 1
                        else:
                            vupusk_flag = []
                    elif midl[vupusk_flag[0]] == " ":
                        if ss < 20:
                            x=(vupusk_flag[0]-25)*16
                            y = -10 - ss
                            pixi(droneimage(vupusk_flag[1]), x, y)
                            ss+=2
                        else:
                            midl[vupusk_flag[0]] = vupusk_flag[1]
                            vupusk_flag = []

            if vustrel_flag:
                if s < 8:
                    x = 0
                    y = -32 - s * 15
                    if s >= 1 and (midl[25] != " " or fl_):
                        fl_ = True
                        midl[25] = " "
                        y = -30
                        pixi(loads("sprites/drones/droneExplosion/droneExplosion_000" + str(s) + ".png"), x, y)
                        s += 1
                    else:
                        fl_ = False
                        draw.line(sc, (255, 255, 255), (int(x * scale) + screenWidth // 2,
                                                        int(y * scale) + screenHeight // 2),
                                  (int(x * scale) + screenWidth // 2,
                                   int((y + 20) * scale) + screenHeight // 2), 4)
                        s += 1
                        if 25 - s * 20 < -50 + 20:
                            for i in range(len(twerd)):
                                if twerd[i] == 0:
                                    s = 8
                                    vbron = vbron - vustrel_flag - ef["‚ô¶"] - ef["üî∂"]
                                    if vbron < 0:
                                        bron += vbron
                                        vbron = 0
                                        if bron < 0:
                                            hp += bron
                                            bron = 0
                else:
                    vustrel_flag = 0

            display.update()
            clock.tick(FPS)

        while len(ha) > 0:
            sbros.append(ha.pop(0))
        # –•–æ–¥ –¥—Ä–æ–Ω–æ–≤
        for ii in range(len(midl)):
            if midl[ii]!=" ":
                x = (ii - 25) * 16
                y = -30

                if midl[ii] == "‚àÜ" or midl[ii] == "‚áÖ":
                    vustrel_flag = 1
                    s = 0
                if midl[ii] == "·êÅ" or midl[ii] == "‚áÖ":
                    vustrel_flag = 1
                    s = 0
                    while s < 13:
                        st_otris(fon, sship, ener, vta, sbros, burn, vs, nam, hod, enemy_ship, sdwig, midl, mhp, hp, mbron, bron, vbron,mlife, life, mdefe, defe, vdefe, ef, enef, manevr, ha, False)

                        draw.line(sc, (255, 255, 255), (int(x * scale) + screenWidth // 2, int((y*scale + 90 + s*15) * scale) + screenHeight // 2),
                                  (int(x * scale) + screenWidth // 2, int((y*scale + 120 + s*15) * scale) + screenHeight // 2), 4)
                        s += 1
                        if s == 2:
                            if ii in range(23,27+1):
                                s = 13
                                vdefe -= vustrel_flag
                                if vdefe < 0:
                                    defe += vdefe
                                    vdefe = 0
                                    if defe < 0:
                                        life += defe
                                        defe = 0
                        display.update()
                        clock.tick(FPS-10)

        # –•–æ–¥ –≤—Ä–∞–≥–∞
        vbron = 0
        if (hp > 0 and life > 0):
            for qqq in range(len(ene(nam, hod)["–£—Ä–æ–Ω"]) // 2):
                x = vs["–ü—É—à–∫–∞"][ene(nam, hod)["–£—Ä–æ–Ω"][2 * qqq + 1]] * 16 - (
                            len(enemy_ship) - 2) * 8 + qqq * 16 - sdwig * 16
                s = 0
                while s < 13:
                    st_otris(fon, sship, ener, vta, sbros, burn, vs, nam, hod, enemy_ship, sdwig, midl, mhp, hp, mbron, bron, vbron,mlife, life, mdefe, defe, vdefe, ef, enef, manevr, ha, False)

                    if s >= 1 and (midl[25 + vs["–ü—É—à–∫–∞"][ene(nam, hod)["–£—Ä–æ–Ω"][2 * qqq + 1]] - sdwig -2] != " " or fl_):
                        fl_=True
                        midl[25 + vs["–ü—É—à–∫–∞"][ene(nam, hod)["–£—Ä–æ–Ω"][2 * qqq + 1]] - sdwig - 2] = " "
                        y = -30
                        pixi(loads("sprites/drones/droneExplosion/droneExplosion_000" + str(s) + ".png"), x, y)
                    else:
                        y = -55 + s * 15
                        draw.line(sc, (255, 255, 255),
                                  (int(x * scale) + screenWidth // 2, int(y * scale) + screenHeight // 2),
                                  (int(x * scale) + screenWidth // 2, int((y + 20) * scale) + screenHeight // 2), 4)
                        if s == 3 and (vs["–ü—É—à–∫–∞"][ene(nam, hod)["–£—Ä–æ–Ω"][2 * qqq + 1]] - sdwig - 2) in range(-2, 3) and midl[
                            25 + vs["–ü—É—à–∫–∞"][ene(nam, hod)["–£—Ä–æ–Ω"][2 * qqq + 1]] - sdwig] == " ":
                            break
                    s += 1
                    display.update()
                    clock.tick(FPS)

                if (vs["–ü—É—à–∫–∞"][ene(nam, hod)["–£—Ä–æ–Ω"][2 * qqq + 1]] - sdwig - 2) in range(-2, 3) and s == 3:
                    vdefe -= ene(nam, hod)["–£—Ä–æ–Ω"][2 * qqq] + enef["‚ô¶"] + enef["üî∂"]
                    if vdefe < 0:
                        defe = defe + vdefe
                        vdefe = 0
                        if defe < 0:
                            life = life + defe
                            defe = 0
            if ene(nam, hod)["–≠—Ñ–£—Ä–æ–Ω"] != [0, 0, "", 0]:
                for qqq in range(len(ene(nam, hod)["–≠—Ñ–£—Ä–æ–Ω"]) // 4):
                    x = vs["–ü—É—à–∫–∞"][ene(nam, hod)["–≠—Ñ–£—Ä–æ–Ω"][4 * qqq + 1]] * 16 - (
                                len(enemy_ship) - 2) * 8 + qqq * 16 - sdwig * 16
                    s = 0
                    while s < 13:
                        st_otris(fon, sship, ener, vta, sbros, burn, vs, nam, hod, enemy_ship, sdwig, midl, mhp, hp, mbron, bron, vbron,mlife, life, mdefe, defe, vdefe, ef, enef, manevr, ha, False)

                        if s == 3 and (vs["–ü—É—à–∫–∞"][ene(nam, hod)["–≠—Ñ–£—Ä–æ–Ω"][4 * qqq + 1]] - sdwig - 2) in range(-2, 3):
                            break
                        y = -55 + s * 15
                        draw.line(sc, (255, 255, 255),
                                  (int(x * scale) + screenWidth // 2, int(y * scale) + screenHeight // 2),
                                  (int(x * scale) + screenWidth // 2, int((y + 20) * scale) + screenHeight // 2), 4)
                        s += 1
                        display.update()
                        clock.tick(FPS)

                    if (vs["–ü—É—à–∫–∞"][ene(nam, hod)["–≠—Ñ–£—Ä–æ–Ω"][4 * qqq + 1]] - sdwig - 2) in range(-2, 3):
                        vdefe -= ene(nam, hod)["–≠—Ñ–£—Ä–æ–Ω"][4 * qqq] + enef["‚ô¶"] + enef["üî∂"]
                        ef[ene(nam, hod)["–≠—Ñ–£—Ä–æ–Ω"][4 * qqq + 2]] += ene(nam, hod)["–≠—Ñ–£—Ä–æ–Ω"][4 * qqq + 3]
                        if vdefe < 0:
                            defe = defe + vdefe
                            vdefe = 0
                            if defe < 0:
                                life = life + defe
                                defe = 0
            if ene(nam, hod)["–©–∏—Ç"] != [0, 0]:
                for qqq in range(len(ene(nam, hod)["–©–∏—Ç"]) // 2):
                    bron += ene(nam, hod)["–©–∏—Ç"][2 * qqq]
                    if bron > mbron:
                        bron = mbron
            if ene(nam, hod)["–í—â–∏—Ç"] != [0, 0]:
                for qqq in range(len(ene(nam, hod)["–í—â–∏—Ç"]) // 2):
                    vbron += ene(nam, hod)["–í—â–∏—Ç"][2 * qqq]
            if ene(nam, hod)["–£—Å–∏–ª–µ–Ω–∏–µ"] != ["", 0, 0]:
                for qqq in range(len(ene(nam, hod)["–£—Å–∏–ª–µ–Ω–∏–µ"]) // 3):
                    enef[ene(nam, hod)["–£—Å–∏–ª–µ–Ω–∏–µ"][3 * qqq]] += ene(nam, hod)["–£—Å–∏–ª–µ–Ω–∏–µ"][3 * qqq + 1]
            if ene(nam, hod)["–î–µ–±–∞—Ñ"] != ["", 0, 0]:
                for qqq in range(len(ene(nam, hod)["–î–µ–±–∞—Ñ"]) // 3):
                    ef[ene(nam, hod)["–î–µ–±–∞—Ñ"][3 * qqq]] += ene(nam, hod)["–î–µ–±–∞—Ñ"][3 * qqq + 1]
            if ene(nam, hod)["–í—ã–ø—É—Å–∫"] != [" ", 0]:
                for qqq in range(len(ene(nam, hod)["–í—ã–ø—É—Å–∫"])//2):
                    wup = ene(nam, hod)["–í—ã–ø—É—Å–∫"][qqq*2]
                    if ef["üöÄ"] > 0:
                        if "‚àÜ" in wup[w]:
                            vup = "·êÅ"
                        if "‚ñ≤" in wup[w]:
                            vup = "‚ñº"
                        if "‚ü±" in wup[w]:
                            vup = "‚ü∞"
                        if "‚∏ï" in wup[w]:
                            vup = "‚∏î"
                        if "‚áñ" in wup[w]:
                            vup = "‚áò"
                        if "‚¨Ü" in wup[w]:
                            vup = "‚¨á"
                        if "‚§â" in wup[w]:
                            vup = "‚§à"
                    else:
                        vup = wup
                    ss=0
                    while ss <= 20:
                        st_otris(fon, sship, ener, vta, sbros, burn, vs, nam, hod, enemy_ship, sdwig, midl, mhp, hp, mbron, bron, vbron,mlife, life, mdefe, defe, vdefe, ef, enef, manevr, ha, False)

                        if enef["ü´ß"] == 0:
                            if ss < 10:
                                fl_ = False
                                x = -(sdwig + (len(vs["–°–ø—Ä–∞–π—Ç—ã"]) - 1) // 2 - ene(nam, hod)["–í—ã–ø—É—Å–∫"][qqq * 2 + 1])*16
                                y = -50 + ss
                                pixi(droneimage(vup), x, y)
                                ss += 2
                            else:
                                if midl[25 - sdwig - (len(vs["–°–ø—Ä–∞–π—Ç—ã"]) - 1) // 2 + vs["–û—Ç—Å–µ–∫"][0] + ene(nam, hod)["–í—ã–ø—É—Å–∫"][
                                             qqq * 2 + 1]] != " " or fl_:
                                    fl_ = True
                                    if ss < 25:
                                        midl[25 - sdwig - (len(vs["–°–ø—Ä–∞–π—Ç—ã"]) - 1) // 2 + vs["–û—Ç—Å–µ–∫"][0] + ene(nam, hod)["–í—ã–ø—É—Å–∫"][
                                             qqq * 2 + 1]] = " "
                                        y = -30
                                        pixi(loads("sprites/drones/droneExplosion/droneExplosion_000" + str(ss - 9) + ".png"), x, y)
                                        ss += 1
                                    else:
                                        break
                                else:
                                    if ss < 20:
                                        x = -(sdwig + (len(vs["–°–ø—Ä–∞–π—Ç—ã"]) - 1) // 2 - ene(nam, hod)["–í—ã–ø—É—Å–∫"][
                                            qqq * 2 + 1]) * 16
                                        y = -50 + ss
                                        pixi(droneimage(vup), x, y)
                                        ss += 2
                                    else:
                                        midl[25 - sdwig - (len(vs["–°–ø—Ä–∞–π—Ç—ã"]) - 1) // 2 + vs["–û—Ç—Å–µ–∫"][0] +
                                                 ene(nam, hod)["–í—ã–ø—É—Å–∫"][qqq * 2 + 1]] = vup
                                        break
                        else:
                            break
                        display.update()
                        clock.tick(FPS)
            if ene(nam, hod)["–†–∞–∑–¥"] != [0, 0]:
                for qqq in range(0, len(ene(nam, hod)["–†–∞–∑–¥"]), 2):
                    if nam == "–ë–∞—à–Ω—è":
                        vta.append(ene(nam, hod)["–†–∞–∑–¥"][qqq])
                    else:
                        sbros.append(ene(nam, hod)["–†–∞–∑–¥"][qqq])
            if ene(nam, hod)["–î–≤–∏–∂"] == -666:
                if vs["–ü—É—à–∫–∞"] != []:
                    k = -sdwig - vs["–ü—É—à–∫–∞"][len(vs["–ü—É—à–∫–∞"]) // 4] + random.randint(0, len(enemy_ship) - 1)
                else:
                    k = -sdwig - vs["–û—Ç—Å–µ–∫"][len(vs["–û—Ç—Å–µ–∫"]) // 4] + random.randint(0, len(enemy_ship) - 1)
            else:
                k=ene(nam, hod)["–î–≤–∏–∂"]
            for qqq in range(abs(k)):
                sdwig += k // abs(k)
                st_otris(fon, sship, ener, vta, sbros, burn, vs, nam, hod, enemy_ship, sdwig, midl, mhp, hp, mbron, bron, vbron,mlife, life, mdefe, defe, vdefe, ef, enef, manevr, ha, False)
                display.update()
                clock.tick(5)


korabl={"–ò–º—è":"–ê—Ä—Ç–µ–º–∏–¥–∞","–ö–∞–±–∏–Ω–∞":[3],"–û—Ç—Å–µ–∫":[1],"–ü—É—à–∫–∞":[2],"–û—Å—Ç–∞–ª—å–Ω–æ–µ":[0,4],"–¢–≤—ë—Ä–¥":[0,1,2,3,4],"–ë—Ä–æ–Ω—è":[],"–£—è–∑–≤–∏–º–æ—Å—Ç—å":[],"–¢—Ä–µ—â–∏–Ω–∞":[],
        "–°–ø—Ä–∞–π—Ç—ã": [chassis_boxy,wing_player,missiles_artemis,cannon_artemis,cockpit_artemis,transform.flip(wing_player,1,0)],"–ö–æ—Ä–ø—É—Å":12,"–©–∏—Ç":4}

battle(korabl, 10, 10, [cards[0], cards[1], cards[2], cards[3], cards[4], cards[5]], 5, "CCD-19 Cicada", 4, 0, [])
battle(korabl, 10, 10, [cards[0], cards[1], cards[2], cards[3], cards[4], cards[5]], 5, "–•–∞–± –¥—Ä –ú–æ–Ω–∞—Ä—Ö", 4, 0, [])
